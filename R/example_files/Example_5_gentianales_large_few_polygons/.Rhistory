write.table(x$sample_table, file = "sample_classification_to_polygon.txt", sep = "\t", ...)
cat("Writing species occurence table: species_occurences_per_polygon.txt. \n")
write.table(x$spec_table, file = "species_occurences_per_polygon.txt", sep =  "\t", ...)
cat("Writing species number per polygon table: speciesnumber_per_polygon.txt. \n")
write.table(x$polygon_table, file = "speciesnumber_per_polygon.txt", sep = "\t", ...)
cat("Writing table of unclassified samples: unclassified samples.txt. \n")
write.table(x$not_classified_samples, file = "unclassified samples.txt", sep = "\t", ...)
cat("Writing coexistence tables: species_coexistence_matrix.txt. \n")
write.table(x$coexistence_classified, file = "species_coexistence_matrix.txt", sep = "\t", ...)
}else{
stop("This function is only defined for class spgeoOUT")
}
}
PlotSpPoly <- function(x, ...){
if (class(x) ==  "spgeoOUT") {
num <- length(names(x$polygon_table))
dat <- sort(x$polygon_table)
counter <- num/10
if (x$polygon_table != NULL){
par(mar = c(10, 4, 2, 2))
barplot(dat,
ylim = c(0, round((max(dat) + max(dat)/4), 0)),
ylab = "Number of Species per Polygon", las = 2, )# ...)
}else{
cat("No point in any polygon")
}
#     }
}
else{
stop("This function is only defined for class <spgeoOUT>")
}
}
BarChartSpec <- function(x, mode = c("percent", "total"), plotout = F, ...){
match.arg(mode)
if (!class(x) ==  "spgeoOUT" && !class(x) ==  "spgeoH"){
stop("This function is only defined for class spgeoOUT")
}
if (plotout ==  FALSE){par(ask = T)}
if (mode[1] ==  "total"){
liste <- x$spec_table$identifier
leng <-  length(liste)
par(mar = c(10, 4, 3, 3))
for(i in 1:leng){
cat(paste("Creating barchart for species ", i, "/", leng, ": ", liste[i], "\n", sep = ""))
spsub <- as.matrix(subset(x$spec_table, x$spec_table$identifier ==  liste[i])[, 2:leng2])
if (sum(spsub) > 0){
barplot(spsub, las = 2, ylim = c(0, (max(spsub) + max(spsub) / 10)),
ylab = "Number of occurrences" , ...)
title(liste[i])
}
}
}
if (mode[1] ==  "percent"){
percent <- x$spec_table[, -1]
anzpoly <-length(names(x$spec_table)[-1])
if (anzpoly > 1){
percent2  <- percent / rowSums(percent) * 100
}else{
percent2  <- percent / sum(percent) * 100
}
percent2[percent2 ==  "NaN"] <- 0
percent2 <- data.frame(identifier = x$spec_table[, 1], percent2)
liste <- x$spec_table$identifier
leng <-  length(liste)
leng2 <- length(colnames(percent2))
par(mar = c(10, 4, 3, 3))
for(i in 1:leng){
cat(paste("Creating barchart for species ", i, "/", leng, ": ", liste[i], "\n", sep = ""))
if (anzpoly > 1){
spsub <- as.matrix(subset(percent2, percent2$identifier ==  liste[i])[, 2:leng2])
}else{
spsub <- as.matrix(percent2[percent2$identifier ==  liste[i], ][, 2:leng2])
names(spsub) <- names(x$spec_table)[-1]
}
if (sum(spsub) > 0){
barplot(spsub, las = 2, ylim = c(0, (max(spsub) + max(spsub) / 10)),
ylab = "Percent of occurrences", names.arg = names(spsub), ...)
title(liste[i])
}
}
}
par(ask = F)
}
BarChartPoly <- function(x, plotout = F, ...){
if (!class(x) ==  "spgeoOUT" && !class(x) ==  "spgeoH"){
stop("This function is only defined for class spgeoOUT")
}
if (plotout ==  FALSE){par(ask = T, mar = c(15, 4, 3, 3))}
liste <- names(x$spec_table)
leng <- length(liste)
par(mar = c(15, 4, 3, 3))
for(i in 2:leng){
cat(paste("Creating barchart for polygon ", i, "/", leng, ": ", liste[i], "\n", sep = ""))
subs <-subset(x$spec_table, x$spec_table[, i] > 0)
datsubs <- subs[order(subs[, i]),]
barplot(datsubs[, i], names.arg = datsubs$identifier,
las = 2, ylab = "Number of occurences",cex.names = .7, ...)
title(liste[i])
}
par(ask = F)
}
HeatPlotCoEx <- function(x, ...){
if (class(x) ==  "spgeoOUT" ){
dat <- x$coexistence_classified
}else{
dat <- x
}
if(dim(dat)[1] > 40) {
plot(c(1,10),c(1,10), type = "n", axes = F, xlab ="", ylab="")
text(0,5,
label = "The Co-existence plot is only possible with less than 40 species.
\n See species coexistence matrix for results.",adj = 0)
}else{
if (class(dat) !=  "data.frame"){
stop("Wrong input format. Input must be a data.frame.")
}
if (dim(dat)[2] !=  (dim(dat)[1] + 1)){
warning("Suspicous data dimensions, check input file.")
}
ymax <- dim(dat)[1]
xmax <- dim(dat)[2]
colo <- rev(heat.colors(10))
numer <- rev(1:ymax)
layout(matrix(c(rep(1, 9), 2), ncol = 1, nrow = 10))
par(mar =  c(0, 10, 10, 0))
plot(0, xlim = c(0, xmax - 1), ylim = c(0, ymax) , type = "n", axes = F, xlab = "", ylab = "")
for(j in 2:xmax ){
cat(paste("Ploting coexistence for species ", j, "/", xmax, ": ", colnames(dat)[j],"\n", sep = ""))
for(i in 1:ymax){
if (i ==  (j - 1)){
rect(j - 2, numer[i] - 1 , j - 1, numer[i], col = "black" )
}else{
ind <- round(dat[i, j]/10, 0)
if (ind ==  0) {
rect(j - 2, numer[i]-1, j - 1, numer[i], col = "white" )
}else{
rect(j - 2, numer[i]-1 , j - 1, numer[i], col = colo[ind] )
}
}
}
}
axis(side = 3, at = seq(0.5, (xmax - 1.5)), labels = colnames(dat)[-1], las = 2, cex.axis = .7, pos = ymax)
axis(2, at = seq(0.5, ymax), labels = rev(dat$identifier), las = 2, cex.axis = .7, pos =  0)
title("Species co-occurrence", line = 9)
par(mar = c(0.5, 10, 0, 0))
plot(c(1, 59), c(1, 12), type = "n", axes = F, ylab  = "", xlab = "")
text(c(13, 13), c(10, 7), c("0%", "10%"))
text(c(20, 20), c(10, 7), c("20%", "30%"))
text(c(27, 27), c(10, 7), c("40%", "50%"))
text(c(34, 34), c(10, 7), c("60%", "70%"))
text(c(41, 41), c(10, 7), c("80%", "90%"))
text(c(48), 10, "100%")
rect(c(9, 9, 16, 16, 23, 23, 30, 30, 37, 37, 44), c(rep(c(10.7, 7.7), 5), 10.7),
c(11, 11, 18, 18, 25, 25, 32, 32, 39, 39, 46), c(rep(c(8.7, 5.7), 5), 8.7),
col = c("white", colo))
rect(7, 5, 51, 12)
}
}
MapPerPoly <- function(x, plotout = FALSE){
if (!class(x) ==  "spgeoOUT"){
stop("This function is only defined for class spgeoOUT")
}
for(i in 1:length(names(x$polygons))){
cat(paste("Creating map for polygon", i,"/",length(names(x$polygons)), ": ", names(x$polygons)[i], "\n",sep = ""))
chopo <- names(x$polygons)[i]
xmax <- min(max(bbox(x$polygons[i])[1, 2]) + 5,180)
xmin <- max(min(bbox(x$polygons[i])[1, 1]) - 5, -180)
ymax <- min(max(bbox(x$polygons[i])[2, 2]) + 5, 90)
ymin <- max(min(bbox(x$polygons[i])[2, 1]) - 5,-90)
po <- data.frame(x$sample_table, x$species_coordinates_in)
subpo <- subset(po, po$homepolygon ==  chopo)
subpo <- subpo[order(subpo$identifier), ]
liste <- unique(subpo$identifier)
leng <- length(liste)
rain <- rainbow(leng)
ypos <- vector(length = leng)
yled <- (ymax - ymin) * 0.025
cat("2")
for(k in 1:leng){
ypos[k]<- ymax - yled * k
}
layout(matrix(c(1, 1, 1, 2, 2), ncol =  5, nrow = 1))
par(mar = c(3, 3, 3, 0))
map("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
box("plot")
title(chopo)
plot(x$polygons[i], col = "grey60", add = T)
for(j in 1:leng){
subsub <- subset(subpo,subpo$identifier == liste[j])
points(subsub[,3], subsub[,4],
cex = 0.7, pch = 3 , col = rain[j])
cat(paste("Adding to polygon ", names(x$polygons)[i], " species ", j, "/", leng, ": ", liste[j],"\n", sep = ""))
}
#legend
cat("Adding legend \n")
par(mar = c(3, 0, 3, 0), ask = F)
plot(c(1, 50), c(1, 50), type = "n", axes = F)
if(leng == 0){
yset <- 25
xset <- 1}
if (leng ==  1){
yset <- 25
xset <- rep(4, leng)
}
if(leng >  1){
yset <- rev(sort(c(seq(25, 25 + max(ceiling(leng/2) - 1, 0)),
seq(24, 24 - leng/2 + 1))))
xset <- rep(4, leng)
}
points(xset-2, yset, pch =  3, col = rain)
if(leng == 0){
text(xset, yset, labels = "No species found in this polygon", adj = 0)
}else{
text(xset, yset, labels =  liste, adj = 0, xpd = T)
rect(min(xset) - 4, min(yset) -1, 50 + 1, max(yset) + 1, xpd = T)
}
if (plotout ==  FALSE){par(ask = T)}
}
par(ask = F)
}
MapPerSpecies <- function(x, moreborders = F, plotout = FALSE, ...){
if (!class(x) ==  "spgeoOUT"){
stop("This function is only defined for class spgeoOUT")
}
layout(matrix(c(1, 1, 1, 1), ncol = 1, nrow = 1))
if (plotout ==  FALSE){par(ask = T)}
dat <- data.frame(x$sample_table, x$species_coordinates_in)
names(dat) <- c("identifier", "homepolygon","XCOOR","YCOOR")
liste <- levels(dat$identifier)
for(i in 1:length(liste)){
cat(paste("Mapping species:", i, "/", length(liste), ": ", liste[i], "\n",sep = ""))
kk <- subset(dat, dat$identifier ==  liste[i])
inside <- CropPointPolygon(data.frame(XCOOR = kk$XCOOR, YCOOR = kk$YCOOR), x$polygons,
outside = F)
outside <- CropPointPolygon(data.frame(XCOOR = kk$XCOOR, YCOOR = kk$YCOOR), x$polygons,
outside = T)
xmax <- min(max(dat$XCOOR) + 2, 180)
xmin <- max(min(dat$XCOOR) - 2, -180)
ymax <- min(max(dat$YCOOR) + 2, 90)
ymin <- max(min(dat$YCOOR) - 2, -90)
map ("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
title(liste[i])
if (moreborders == T) {plot(wrld_simpl, add = T)}
plot(x$polygons, col = "grey60", add = T)
if(length(inside) > 0){
points(inside$XCOOR, inside$YCOOR,
cex = 0.7, pch = 3 , col = "blue")
}
if(length(outside) >0){
points(outside$XCOOR, outside$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
box("plot")
}
par(ask = F)
}
MapAll <- function(x, polyg, moreborders = F, ...){
data(wrld_simpl)
if (class(x) ==  "spgeoOUT"){
xmax <- min(max(x$species_coordinates_in[, 2]) + 2, 180)
xmin <- max(min(x$species_coordinates_in[, 2]) - 2, -180)
ymax <- min(max(x$species_coordinates_in[, 1]) + 2, 90)
ymin <- max(min(x$species_coordinates_in[, 1]) - 2, -90)
difx <- sqrt(xmax^2 + xmin^2)
dify <- sqrt(ymax^2 + ymin^2)
if(difx > 90){
xmax <- min(xmax +10, 180)
xmin <- max(xmin -10,-180)
ymax <- min(ymax +10, 90)
ymin <- max(ymin -10,-90)
}
cat("Creating map of all samples. \n")
map ("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
box("plot")
title("All samples")
if (moreborders ==  T) {plot(wrld_simpl, add = T)}
cat("Adding polygons. \n")
plot(x$polygons, col = "grey60", add = T, ...)
cat("Adding sample points. \n")
points(x$species_coordinates_in[, 1], x$species_coordinates_in[, 2],
cex = 0.7, pch = 3 , col = "blue", ...)
}
if (class(x) ==  "matrix" || class(x) ==  "data.frame"){
if (!is.numeric(x[, 1]) || !is.numeric(x[, 2])){
stop(paste("Wrong input format:\n",
"Point input must be a <matrix> or <data.frame> with 2 columns.\n",
"Column order must be lon - lat.", sep = ""))
}
if (class(polyg) !=  "SpatialPolygons"){
warning("To plot polygons, polyg must be of class <SpatialPolygons>.")
}
x <- as.data.frame(x)
nums <- sapply(x, is.numeric)
x<- x[, nums]
xmax <- min(max(x[, 2]) + 2, 180)
xmin <- max(min(x[, 2]) - 2, -180)
ymax <- min(max(x[, 1]) + 2, 90)
ymin <- max(min(x[, 1]) - 2, -90)
if (ymax > 92 || ymin < -92){
warning("Column order must be lon-lat, not lat - lon. Please check")
}
map ("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
title("All samples")
box("plot")
if (moreborders ==  T) {plot(wrld_simpl, add = T, ...)}
plot(polyg, col = "grey60", add = T, ...)
points(x[, 2], x[, 1],
cex = 0.7, pch = 3 , col = "blue", ...)
}
}
MapUnclassified <- function(x, moreborders = F, ...){
if (!class(x) ==  "spgeoOUT"){
stop("This function is only defined for class spgeoOUT")
}
dat <- data.frame(x$not_classified_samples)
if (length(dat) ==  0){
plot(c(1:20), c(1:20), type  = "n", axes = F, xlab = "", ylab = "")
text(10, 10, labels = paste("All points fell into the polygons and were classified.\n",
"No unclassified points", sep = ""))
}else{
xmax <- min(max(dat$XCOOR) + 2, 180)
xmin <- max(min(dat$XCOOR) - 2, -180)
ymax <- min(max(dat$YCOOR) + 2, 90)
ymin <- max(min(dat$YCOOR) - 2, -90)
cat("Creating map of unclassified samples. \n")
map ("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax), ...)
axis(1)
axis(2)
title("Samples not classified to polygons \n")
if (moreborders == T) {plot(wrld_simpl, add = T)}
cat("Adding polygons")
plot(x$polygons, col = "grey60", add = T, ...)
cat("adding sample points. \n")
points(dat$XCOOR, dat$YCOOR,
cex = 0.7, pch = 3 , col = "red", ...)
box("plot")
}
}
OutMapAll <- function(x, ...){
cat("Creating overview map: map_samples_overview.pdf. \n")
pdf(file = "map_samples_overview.pdf", paper = "a4r", onefile = T, ...)
MapAll(x, ...)
MapUnclassified(x, ...)
dev.off()
}
OutMapPerPoly <- function(x){
cat("Creating map per polygon: map_samples_per_polygon.pdf. \n")
pdf(file = "map_samples_per_polygon.pdf", paper = "a4r", onefile = T)
MapPerPoly(x, plotout = T)
dev.off()
}
OutMapPerSpecies <- function(x){
cat("Creating map per species: map_samples_per_species.pdf. \n")
pdf(file = "map_samples_per_species.pdf", paper = "a4r", onefile = T)
MapPerSpecies(x, plotout = T)
dev.off()
}
OutBarChartSpec <- function(x, ...){
cat("Creating barchart per species: barchart_per_species.pdf. \n")
pdf(file = "barchart_per_species.pdf", paper = "a4r", onefile = T)
BarChartSpec(x, plotout = T, mode = "percent", ...)
dev.off()
}
OutBarChartPoly <- function(x, ...){
cat("Creating barchart per polygon: barchart_per_polygon.pdf. \n")
pdf(file = "barchart_per_polygon.pdf", paper = "a4r", onefile = T)
BarChartPoly(x, plotout = T, cex.axis = .8, ...)
dev.off()
}
OutHeatCoEx <- function(x, ...){
cat("Creating coexistence heatplot: heatplot_coexistence.pdf. \n")
pdf(file = "heatplot_coexistence.pdf", paper = "a4r", onefile = T)
HeatPlotCoEx(x, ...)
dev.off()
}
OutPlotSpPoly <- function(x, ...){
cat("Creating species per polygon barchart: number_of_species_per_polygon.pdf. \n")
pdf(file = "number_of_species_per_polygon.pdf", paper = "a4r", onefile = T)
PlotSpPoly(x, ...)
dev.off()
}
PlotOutSpGeo <- function(x, ...){
OutPlotSpPoly(x, ...)
OutBarChartPoly(x, ...)
OutBarChartSpec(x, ...)
OutMapAll(x, ...)
OutMapPerSpecies(x, ...)
OutMapPerPoly(x, ...)
}
SpeciesGeoCoder <- function(x, y, coex = F, graphs = T){
ini <- ReadPoints(x, y)
outo <- SpGeoCodH(ini)
WriteTablesSpGeo(outo)
if(graphs == T){
PlotOutSpGeo(outo)
}
if(coex == T)
{
outo <- CoExClass(outo)
OutHeatCoEx(outo)
}
}
nn <- data.frame(t(replicate(repli, system.time(SpeciesGeoCoder("input_point_coordinates.txt",
"input_polygon_points.txt", graphs = T)))[3,]))
rownames(nn)<- "SpeciesGeoCoder_graph_on_coex_off"
x <-xx
length(names(x)[-1])
names(x)
xx <- ReadPoints("input_point_coordinates.txt","input_polygon_points.txt")
x <-xx
numpoly <- length(names(x)[-1])
numpoly
x
kkk <- PipSamp(x)
jjj <- SpSumH(kkk)
x <-jjj
numpoly <- length(names(x)[-1])
numpoly
x
pp <- x[, -1]
pp[pp > 0] <- 1
if (numpoly > 1){
num_sp_poly <- colSums(pp)
}else{
num_sp_poly <- sum(pp)
names(num_sp_poly) <- names(x)[2]
}
}
cat("Calculating species number per polygon. \n")
numpoly <- length(names(x)[-1])
if(numpoly == 1){
num_sp_poly <- "NULL"
}else{
pp <- x[, -1]
pp[pp > 0] <- 1
if (numpoly > 1){
num_sp_poly <- colSums(pp)
}else{
num_sp_poly <- sum(pp)
names(num_sp_poly) <- names(x)[2]
}
}
return(num_sp_poly)
num_sp_poly
SpPerPolH <- function(x){
cat("Calculating species number per polygon. \n")
numpoly <- length(names(x)[-1])
if(numpoly == 1){
num_sp_poly <- "NULL"
}else{
pp <- x[, -1]
pp[pp > 0] <- 1
if (numpoly > 1){
num_sp_poly <- colSums(pp)
}else{
num_sp_poly <- sum(pp)
names(num_sp_poly) <- names(x)[2]
}
}
return(num_sp_poly)
cat("Done")
}
SpPerPolH(x)
xx <- ReadPoints("input_point_coordinates.txt","input_polygon_points.txt")
SpGeoCodH(xx)
outo <- SpGeoCodH(xx)
WriteTablesSpGeo(outo)
PlotOutSpGeo(outo)
x <-outo
num <- length(names(x$polygon_table))
dat <- sort(x$polygon_table)
counter <- num/10
if (x$polygon_table != NULL){
par(mar = c(10, 4, 2, 2))
barplot(dat,
ylim = c(0, round((max(dat) + max(dat)/4), 0)),
ylab = "Number of Species per Polygon", las = 2, )# ...)
}else{
cat("No point in any polygon")
}
x$polygon_table
pp <- NULL
length(pp)
length(x$polygon_table)
PlotSpPoly <- function(x, ...){
if (class(x) ==  "spgeoOUT") {
num <- length(names(x$polygon_table))
dat <- sort(x$polygon_table)
counter <- num/10
if (length(x$polygon_table) != 0){
par(mar = c(10, 4, 2, 2))
barplot(dat,
ylim = c(0, round((max(dat) + max(dat)/4), 0)),
ylab = "Number of Species per Polygon", las = 2, )# ...)
}else{
cat("No point in any polygon")
}
}
else{
stop("This function is only defined for class <spgeoOUT>")
}
}
nn <- data.frame(t(replicate(repli, system.time(SpeciesGeoCoder("input_point_coordinates.txt",
"input_polygon_points.txt", graphs = T)))[3,]))
