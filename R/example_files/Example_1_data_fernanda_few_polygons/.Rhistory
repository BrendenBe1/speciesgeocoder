title("Species co-occurrence", line = 9)
par(mar = c(0.5, 10, 0, 0))
plot(c(1, 59), c(1, 12), type = "n", axes = F, ylab  = "", xlab = "")
text(c(13, 13), c(10, 7), c("0%", "10%"))
text(c(20, 20), c(10, 7), c("20%", "30%"))
text(c(27, 27), c(10, 7), c("40%", "50%"))
text(c(34, 34), c(10, 7), c("60%", "70%"))
text(c(41, 41), c(10, 7), c("80%", "90%"))
text(c(48), 10, "100%")
rect(c(9, 9, 16, 16, 23, 23, 30, 30, 37, 37, 44), c(rep(c(10.7, 7.7), 5), 10.7),
c(11, 11, 18, 18, 25, 25, 32, 32, 39, 39, 46), c(rep(c(8.7, 5.7), 5), 8.7),
col = c("white", colo))
rect(7, 5, 51, 12)
}
}
Mapping <- function(x, pdataf, mode = c("dataset", "spgeoOUT"),
pointmode = c("all", "classified"),
scale = c("auto_extent", "extent", "world", "country"),
name, xmin, xmax, ymin, ymax, ...) {
match.arg(scale)
match.arg(mode)
match.arg(pointmode)
if (scale[1] ==  "extent" && xmin < -180 ||
scale[1] ==  "extent" && xmax > 180 ||
scale[1] ==  "extent" && ymin < -90 ||
scale[1] ==  "extent" && ymax > 90){
stop("Boundary coordinates, must be between -180 and 180 for longitude and \n between -90 and 90 for lat")
}
if (mode[1] ==  "dataset" && class(x) ==  "spgeoOUT"){
mode <- "spgeoOUT"
warning("Mode was set to spgeoOUT due to input class")
}
if (mode[1] ==  "dataset" && class(x) !=  "SpatialPolygons"){
stop("For mode <dataset> x must be an object of class <SpatialPolygons>.")
}
if (mode[1] ==  "dataset" && class(pdataf) !=  "data.frame"){
stop("For mode <dataset> pdataf must be an object of class <data.frame>.
Columns must be: <identifier>, <YCOOR>, <XCOOR>")
}
if (mode[1] ==  "dataset"){
polyg <- x
notclass <- pdataf
}
if (mode[1] ==  "spgeoOUT"){
if (class(x) !=  "spgeoOUT"){
warning("Mode <spgeoOUT> is only defined for class <spgeoOUT>. \n Use mode = <dataset> for datasets")
}else{
if (pointmode[1] ==  "all"){
pdataf <- data.frame(x$identifier_in, x$species_coordinates_in)
names(pdataf) <- c("identifier", "YCOOR", "XCOOR")
}
if (pointmode[1] ==  "classified"){
sub <- subset(x$sample_table, is.na(x$sample_table[, 2]) ==  F)
pdataf <- data.frame(identifier = x$identifier_in, x$species_coordinates_in)
pdataf <- pdataf[rownames(sub), ]
}
}
polyg <- x$polygons
notclass <- x$not_classified_samples
}
data(wrld_simpl)
dev.off()
ma <- map("world")
plot.new()
additions <- wrld_simpl$NAME[which(wrld_simpl$NAME %in% ma$names ==  FALSE)]
additionsplot <-  subset(wrld_simpl, wrld_simpl$NAME %in% additions)
par(mar = c(2, 2, 2, 2), ...)
if (scale[1] ==  "world"){
map("world")
axis(1)
axis(2)
box("plot")
plot(additionsplot, add  = T)
plot(polyg, col = "grey60", add = T)
points(pdataf$XCOOR, pdataf$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
if (scale[1] ==  "country"){
spell <- which((name %in% ma$name) == FALSE &&
(name %in% wrld_simpl$NAME) ==  FALSE)
if (length(spell) > 0){
cat("The following names were not found in the dataset: \n Please check spelling:\n",
name[spell], "\n")
}
len <- length(name)
if (name %in% ma$name){
if (len ==  1){
pointcrop <- as.data.frame(CropPointCountry(pdataf, name))
names(pointcrop) <- c("XCOOR", "YCOOR")
if (name ==  "USA"){
map("world", regions = name, xlim = c(-180, -50), ylim = c(20, 75))
}else{
map("world", regions = name)
}
axis(1)
axis(2)
box("plot")
plot(polyg, col = "grey60", add = T)
points(pointcrop$XCOOR, pointcrop$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
if (len > 1){
pointcrop <- as.data.frame(CropPointCountry(pdataf, name))
names(pointcrop) <- c("XCOOR", "YCOOR")
map("world", regions = name)
axis(1)
axis(2)
box("plot")
plot(polyg, col = "grey60", add = T)
points(pointcrop$XCOOR, pointcrop$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
}else{
if (len ==  1){
if (name ==  "Russia"){
map("world", regions = "USSR", xlim = c(20, 180), type =  "n")
plot(subset(wrld_simpl, wrld_simpl$NAME ==  name), add = T)
}else{
pointcrop <- as.data.frame(CropPointCountry(pdataf, name))
names(pointcrop) <- c("XCOOR", "YCOOR")
plot(subset(wrld_simpl, wrld_simpl$NAME ==  name))
}
axis(1)
axis(2)
box("plot")
plot(polyg, col = "grey60", add = T)
points(pointcrop$XCOOR, pointcrop$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
}
if (len > 1){
pointcrop <- as.data.frame(CropPointCountry(pdataf, name))
names(pointcrop) <- c("XCOOR", "YCOOR")
plot(subset(wrld_simpl, wrld_simpl$NAME ==  name))
plot(polyg, col = "grey60", add = T)
points(pointcrop$XCOOR, pointcrop$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
}
if (scale[1] ==  "extent"){
map("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
box("plot")
plot(polyg, col = "grey60", add = T)
points(pdataf$XCOOR, pdataf$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
if (scale[1] ==  "auto_extent"){
xmax <- max(bbox(polyg)[1, 2], max(notclass$XCOOR))
xmin <- min(bbox(polyg)[1, 1], min(notclass$XCOOR))
ymax <- max(bbox(polyg)[2, 2], max(notclass$YCOOR))
ymin <- min(bbox(polyg)[2, 1], min(notclass$YCOOR))
map("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
box("plot")
plot(polyg, col = "grey60", add = T)
points(pdataf$XCOOR, pdataf$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
}
MapPerPoly <- function(x, plotout = FALSE){
if (!class(x) ==  "spgeoOUT"){
stop("This function is only defined for class spgeoOUT")
}
for(i in 1:length(names(x$polygons))){
cat(paste("Creating map for polygon", i,"/",length(names(x$polygons)), ": ", names(x$polygons)[i], "\n",sep = ""))
chopo <- names(x$polygons)[i]
xmax <- min(max(bbox(x$polygons[i])[1, 2]) + 5,180)
xmin <- max(min(bbox(x$polygons[i])[1, 1]) - 5, -180)
ymax <- min(max(bbox(x$polygons[i])[2, 2]) + 5, 90)
ymin <- max(min(bbox(x$polygons[i])[2, 1]) - 5,-90)
po <- data.frame(x$sample_table, x$species_coordinates_in)
subpo <- subset(po, po$homepolygon ==  chopo)
subpo <- subpo[order(subpo$identifier), ]
liste <- unique(subpo$identifier)
leng <- length(liste)
rain <- rainbow(leng)
ypos <- vector(length = leng)
yled <- (ymax - ymin) * 0.025
cat("2")
for(k in 1:leng){
ypos[k]<- ymax - yled * k
}
layout(matrix(c(1, 1, 1, 2, 2), ncol =  5, nrow = 1))
par(mar = c(3, 3, 3, 0))
map("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
box("plot")
title(chopo)
plot(x$polygons[i], col = "grey60", add = T)
for(j in 1:leng){
subsub <- subset(subpo,subpo$identifier == liste[j])
points(subsub[,3], subsub[,4],
cex = 0.7, pch = 3 , col = rain[j])
cat(paste("Adding to polygon ", names(x$polygons)[i], " species ", j, "/", leng, ": ", liste[j],"\n", sep = ""))
}
#legend
cat("Adding legend \n")
par(mar = c(3, 0, 3, 0), ask = F)
plot(c(1, 50), c(1, 50), type = "n", axes = F)
if(leng == 0){
yset <- 25
xset <- 1}
if (leng ==  1){
yset <- 25
xset <- rep(4, leng)
}
if(leng >  1){
yset <- rev(sort(c(seq(25, 25 + max(ceiling(leng/2) - 1, 0)),
seq(24, 24 - leng/2 + 1))))
xset <- rep(4, leng)
}
points(xset-2, yset, pch =  3, col = rain)
if(leng == 0){
text(xset, yset, labels = "No species found in this polygon", adj = 0)
}else{
text(xset, yset, labels =  liste, adj = 0, xpd = T)
rect(min(xset) - 4, min(yset) -1, 50 + 1, max(yset) + 1, xpd = T)
}
if (plotout ==  FALSE){par(ask = T)}
}
par(ask = F)
}
MapPerSpecies <- function(x, moreborders = F, plotout = FALSE, ...){
if (!class(x) ==  "spgeoOUT"){
stop("This function is only defined for class spgeoOUT")
}
layout(matrix(c(1, 1, 1, 1), ncol = 1, nrow = 1))
if (plotout ==  FALSE){par(ask = T)}
dat <- data.frame(x$sample_table, x$species_coordinates_in)
names(dat) <- c("identifier", "homepolygon","XCOOR","YCOOR")
liste <- levels(dat$identifier)
for(i in 1:length(liste)){
cat(paste("Mapping species:", i, "/", length(liste), ": ", liste[i], "\n",sep = ""))
kk <- subset(dat, dat$identifier ==  liste[i])
inside <- CropPointPolygon(data.frame(XCOOR = kk$XCOOR, YCOOR = kk$YCOOR), x$polygons,
outside = F)
outside <- CropPointPolygon(data.frame(XCOOR = kk$XCOOR, YCOOR = kk$YCOOR), x$polygons,
outside = T)
xmax <- min(max(dat$XCOOR) + 2, 180)
xmin <- max(min(dat$XCOOR) - 2, -180)
ymax <- min(max(dat$YCOOR) + 2, 90)
ymin <- max(min(dat$YCOOR) - 2, -90)
map ("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
title(liste[i])
if (moreborders == T) {plot(wrld_simpl, add = T)}
plot(x$polygons, col = "grey60", add = T)
if(length(inside) > 0){
points(inside$XCOOR, inside$YCOOR,
cex = 0.7, pch = 3 , col = "blue")
}
if(length(outside) >0){
points(outside$XCOOR, outside$YCOOR,
cex = 0.7, pch = 3 , col = "red")
}
box("plot")
}
par(ask = F)
}
MapAll <- function(x, polyg, moreborders = F, ...){
data(wrld_simpl)
if (class(x) ==  "spgeoOUT"){
xmax <- min(max(x$species_coordinates_in[, 2]) + 2, 180)
xmin <- max(min(x$species_coordinates_in[, 2]) - 2, -180)
ymax <- min(max(x$species_coordinates_in[, 1]) + 2, 90)
ymin <- max(min(x$species_coordinates_in[, 1]) - 2, -90)
difx <- sqrt(xmax^2 + xmin^2)
dify <- sqrt(ymax^2 + ymin^2)
if(difx > 90){
xmax <- min(xmax +10, 180)
xmin <- max(xmin -10,-180)
ymax <- min(ymax +10, 90)
ymin <- max(ymin -10,-90)
}
cat("Creating map of all samples. \n")
map ("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
box("plot")
title("All samples")
if (moreborders ==  T) {plot(wrld_simpl, add = T)}
cat("Adding polygons. \n")
plot(x$polygons, col = "grey60", add = T, ...)
cat("Adding sample points. \n")
points(x$species_coordinates_in[, 1], x$species_coordinates_in[, 2],
cex = 0.7, pch = 3 , col = "blue", ...)
}
if (class(x) ==  "matrix" || class(x) ==  "data.frame"){
if (!is.numeric(x[, 1]) || !is.numeric(x[, 2])){
stop(paste("Wrong input format:\n",
"Point input must be a <matrix> or <data.frame> with 2 columns.\n",
"Column order must be lon - lat.", sep = ""))
}
if (class(polyg) !=  "SpatialPolygons"){
warning("To plot polygons, polyg must be of class <SpatialPolygons>.")
}
x <- as.data.frame(x)
nums <- sapply(x, is.numeric)
x<- x[, nums]
xmax <- min(max(x[, 2]) + 2, 180)
xmin <- max(min(x[, 2]) - 2, -180)
ymax <- min(max(x[, 1]) + 2, 90)
ymin <- max(min(x[, 1]) - 2, -90)
if (ymax > 92 || ymin < -92){
warning("Column order must be lon-lat, not lat - lon. Please check")
}
map ("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax))
axis(1)
axis(2)
title("All samples")
box("plot")
if (moreborders ==  T) {plot(wrld_simpl, add = T, ...)}
plot(polyg, col = "grey60", add = T, ...)
points(x[, 2], x[, 1],
cex = 0.7, pch = 3 , col = "blue", ...)
}
}
MapUnclassified <- function(x, moreborders = F, ...){
if (!class(x) ==  "spgeoOUT"){
stop("This function is only defined for class spgeoOUT")
}
dat <- data.frame(x$not_classified_samples)
if (length(dat) ==  0){
plot(c(1:20), c(1:20), type  = "n", axes = F, xlab = "", ylab = "")
text(10, 10, labels = paste("All points fell into the polygons and were classified.\n",
"No unclassified points", sep = ""))
}else{
xmax <- min(max(dat$XCOOR) + 2, 180)
xmin <- max(min(dat$XCOOR) - 2, -180)
ymax <- min(max(dat$YCOOR) + 2, 90)
ymin <- max(min(dat$YCOOR) - 2, -90)
cat("Creating map of unclassified samples. \n")
map ("world", xlim = c(xmin, xmax), ylim = c(ymin, ymax), ...)
axis(1)
axis(2)
title("Samples not classified to polygons \n")
if (moreborders == T) {plot(wrld_simpl, add = T)}
cat("Adding polygons")
plot(x$polygons, col = "grey60", add = T, ...)
cat("adding sample points. \n")
points(dat$XCOOR, dat$YCOOR,
cex = 0.7, pch = 3 , col = "red", ...)
box("plot")
}
}
OutMapAll <- function(x, ...){
cat("Creating overview map: map_samples_overview.pdf. \n")
pdf(file = "map_samples_overview.pdf", paper = "a4r", onefile = T, ...)
MapAll(x, ...)
MapUnclassified(x, ...)
dev.off()
}
OutMapPerPoly <- function(x){
cat("Creating map per polygon: map_samples_per_polygon.pdf. \n")
pdf(file = "map_samples_per_polygon.pdf", paper = "a4r", onefile = T)
MapPerPoly(x, plotout = T)
dev.off()
}
OutMapPerSpecies <- function(x){
cat("Creating map per species: map_samples_per_species.pdf. \n")
pdf(file = "map_samples_per_species.pdf", paper = "a4r", onefile = T)
MapPerSpecies(x, plotout = T)
dev.off()
}
OutBarChartSpec <- function(x, ...){
cat("Creating barchart per species: barchart_per_species.pdf. \n")
pdf(file = "barchart_per_species.pdf", paper = "a4r", onefile = T)
BarChartSpec(x, plotout = T, mode = "percent", ...)
dev.off()
}
OutBarChartPoly <- function(x, ...){
cat("Creating barchart per polygon: barchart_per_polygon.pdf. \n")
pdf(file = "barchart_per_polygon.pdf", paper = "a4r", onefile = T)
BarChartPoly(x, plotout = T, cex.axis = .8, ...)
dev.off()
}
OutHeatCoEx <- function(x, ...){
cat("Creating coexistence heatplot: heatplot_coexistence.pdf. \n")
pdf(file = "heatplot_coexistence.pdf", paper = "a4r", onefile = T)
HeatPlotCoEx(x, ...)
dev.off()
}
OutPlotSpPoly <- function(x, ...){
cat("Creating species per polygon barchart: number_of_species_per_polygon.pdf. \n")
pdf(file = "number_of_species_per_polygon.pdf", paper = "a4r", onefile = T)
PlotSpPoly(x, ...)
dev.off()
}
PlotOutSpGeo <- function(x, ...){
OutPlotSpPoly(x, ...)
OutBarChartPoly(x, ...)
OutBarChartSpec(x, ...)
OutMapAll(x, ...)
OutMapPerSpecies(x, ...)
OutMapPerPoly(x, ...)
}
SpeciesGeoCoder <- function(x, y, ...){
ini <- ReadPoints(x, y, ...)
outo <- SpGeoCodH(ini, ...)
outo <- CoExClass(outo, ...)
WriteTablesSpGeo(outo, ...)
PlotOutSpGeo(outo, ...)
OutHeatCoEx(outo, ...)
}
SpeciesGeoCoderlarge <- function(x, y, ...){
ini <- ReadPoints(x, y, ...)
outo <- SpGeoCodH(ini, ...)
WriteTablesSpGeo(outo, ...)
PlotOutSpGeo(outo, ...)
}
setwd("C:\\Users\\xzizal\\Desktop\\GitHub\\geocoder\\R\\example_files\\Example_3_gentianales_large")
system.time(ReadPoints("allgentianales4_R.txt","realmpoly_R.txt"))
aa <- system.time(ReadPoints("allgentianales4_R.txt","realmpoly_R.txt"))
aa[3]
aa
?replicate
aa <- system.time(replicate(5, ReadPoints("allgentianales4_R.txt","realmpoly_R.txt")))
aa
aa <- replicate(5, system.time(ReadPoints("allgentianales4_R.txt","realmpoly_R.txt")))
aa
aa <- replicate(repli, system.time(ReadPoints("allgentianales4_R.txt","realmpoly_R.txt")))[3,]
repli <- 100
aa <- replicate(repli, system.time(ReadPoints("allgentianales4_R.txt","realmpoly_R.txt")))[3,]
aa
aa <- replicate(5, system.time(ReadPoints("allgentianales4_R.txt","realmpoly_R.txt")))[3,]
aa
setwd("C:\\Users\\xzizal\\Desktop\\GitHub\\geocoder\\R\\example_files\\Example_1_data_fernanda")
test <- ReadPoints("input_point_coordinates.txt","input_polygon_points.txt")
test2 <- SpGeoCod("input_point_coordinates.txt","input_polygon_points.txt")
test2 <- CoExClass(test2)
repli <- 5
aa <- replicate(repli, system.time(ReadPoints("input_point_coordinates.txt","input_polygon_points.txt")))[3,]
bb <- replicate(repli, system.time(SpGeoCod("input_point_coordinates.txt","input_polygon_points.txt")))[3,]
dd <- replicate(repli, system.time(PipSamp(test)))[3,]
ee <- replicate(repli, system.time(CoExClass(test2)))[3,]
ff <- replicate(repli, system.time(WriteTablesSpGeo(test2)))[3,]
gg <- replicate(repli, system.time(OutPlotSpPoly(test2)))[3,]
hh <- replicate(repli, system.time(OutBarChartPoly(test2)))[3,]
ii <- replicate(repli, system.time(OutBarChartSpec(test2)))[3,]
jj <- replicate(repli, system.time(OutMapAll(test2)))[3,]
kk <- replicate(repli, system.time(OutMapPerSpecies(test2)))[3,]
ll <- replicate(repli, system.time(OutMapPerPoly(test2)))[3,]
mm <- replicate(repli, system.time(OutHeatCoEx(test2)))[3,]
nn <- replicate(repli, system.time(SpeciesGeoCoder("input_point_coordinates.txt",
"input_polygon_points.txt")))[3,]
times <- rbind(aa, bb, dd, ee, ff, gg, hh, ii ,jj, kk, l, mm, nn)
nam <- ("ReadPoints", "SpGeoCod", "PipSamp", "CoExClass", "WriteTablesSpGeo", "OutPlotSpPoly",
"OutBarChartPoly", "OutBarChartSpec", "OutMapAll"," OutMapPerSpecies", "OutMapPerPoly",
"OutHeatCoEx", "SpeciesGeoCoder")
out <- data.frame(nam, times)
setwd("C:\\Users\\xzizal\\Desktop\\GitHub\\geocoder\\R\\example_files\\Example_1_data_fernanda")
setwd("C:\\Users\\xzizal\\Desktop\\GitHub\\geocoder\\R\\example_files\\Example_1_data_fernanda_few_polygons")
test <- ReadPoints("input_point_coordinates.txt","input_polygon_points.txt")
test2 <- SpGeoCod("input_point_coordinates.txt","input_polygon_points.txt")
test2 <- CoExClass(test2)
repli <- 5
aa <- replicate(repli, system.time(ReadPoints("input_point_coordinates.txt","input_polygon_points.txt")))[3,]
bb <- replicate(repli, system.time(SpGeoCod("input_point_coordinates.txt","input_polygon_points.txt")))[3,]
dd <- replicate(repli, system.time(PipSamp(test)))[3,]
ee <- replicate(repli, system.time(CoExClass(test2)))[3,]
ff <- replicate(repli, system.time(WriteTablesSpGeo(test2)))[3,]
gg <- replicate(repli, system.time(OutPlotSpPoly(test2)))[3,]
hh <- replicate(repli, system.time(OutBarChartPoly(test2)))[3,]
ii <- replicate(repli, system.time(OutBarChartSpec(test2)))[3,]
jj <- replicate(repli, system.time(OutMapAll(test2)))[3,]
kk <- replicate(repli, system.time(OutMapPerSpecies(test2)))[3,]
ll <- replicate(repli, system.time(OutMapPerPoly(test2)))[3,]
mm <- replicate(repli, system.time(OutHeatCoEx(test2)))[3,]
nn <- replicate(repli, system.time(SpeciesGeoCoder("input_point_coordinates.txt",
"input_polygon_points.txt")))[3,]
repli <- 1
aa <- replicate(repli, system.time(ReadPoints("input_point_coordinates.txt","input_polygon_points.txt")))[3,]
bb <- replicate(repli, system.time(SpGeoCod("input_point_coordinates.txt","input_polygon_points.txt")))[3,]
dd <- replicate(repli, system.time(PipSamp(test)))[3,]
ee <- replicate(repli, system.time(CoExClass(test2)))[3,]
ff <- replicate(repli, system.time(WriteTablesSpGeo(test2)))[3,]
gg <- replicate(repli, system.time(OutPlotSpPoly(test2)))[3,]
hh <- replicate(repli, system.time(OutBarChartPoly(test2)))[3,]
ii <- replicate(repli, system.time(OutBarChartSpec(test2)))[3,]
jj <- replicate(repli, system.time(OutMapAll(test2)))[3,]
kk <- replicate(repli, system.time(OutMapPerSpecies(test2)))[3,]
ll <- replicate(repli, system.time(OutMapPerPoly(test2)))[3,]
mm <- replicate(repli, system.time(OutHeatCoEx(test2)))[3,]
nn <- replicate(repli, system.time(SpeciesGeoCoder("input_point_coordinates.txt",
"input_polygon_points.txt")))[3,]
times <- rbind(aa, bb, dd, ee, ff, gg, hh, ii ,jj, kk, l, mm, nn)
nam <- ("ReadPoints", "SpGeoCod", "PipSamp", "CoExClass", "WriteTablesSpGeo", "OutPlotSpPoly",
"OutBarChartPoly", "OutBarChartSpec", "OutMapAll"," OutMapPerSpecies", "OutMapPerPoly",
"OutHeatCoEx", "SpeciesGeoCoder")
total <- rowSums(times)
averag <- rowSums(times) / repli
out <- data.frame(nam,averag, times)
times <- rbind(aa, bb, dd, ee, ff, gg, hh, ii ,jj, kk, ll, mm, nn)
nam <- ("ReadPoints", "SpGeoCod", "PipSamp", "CoExClass", "WriteTablesSpGeo", "OutPlotSpPoly",
"OutBarChartPoly", "OutBarChartSpec", "OutMapAll"," OutMapPerSpecies", "OutMapPerPoly",
"OutHeatCoEx", "SpeciesGeoCoder")
nam <- ("ReadPoints", "SpGeoCod", "PipSamp", "CoExClass", "WriteTablesSpGeo", "OutPlotSpPoly",
"OutBarChartPoly", "OutBarChartSpec", "OutMapAll"," OutMapPerSpecies", "OutMapPerPoly",
"OutHeatCoEx", "SpeciesGeoCoder")
nam <- c("ReadPoints", "SpGeoCod", "PipSamp", "CoExClass", "WriteTablesSpGeo", "OutPlotSpPoly",
"OutBarChartPoly", "OutBarChartSpec", "OutMapAll"," OutMapPerSpecies", "OutMapPerPoly",
"OutHeatCoEx", "SpeciesGeoCoder")
total <- rowSums(times)
averag <- rowSums(times) / repli
out <- data.frame(nam,averag, times)
out
rm(list = ls())
